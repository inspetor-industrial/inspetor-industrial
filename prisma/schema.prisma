datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  OPERATOR
  USER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  status        UserStatus @default(ACTIVE)
  role          UserRole   @default(USER)

  password String?

  Authenticator Authenticator[]

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Documents Documents[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  service     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

model Company {
  id     String        @id @default(cuid())
  name   String
  cnpj   String
  status CompanyStatus @default(ACTIVE)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  storage          Storage[]
  users            User[]
  DailyMaintenance DailyMaintenance[]
  Instruments      Instruments[]
  Documents        Documents[]

  @@unique([cnpj])
}

enum StorageStatus {
  ACTIVE
  INACTIVE
}

model Storage {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  relativeLink String

  status StorageStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyMaintenance {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  description  String
  equipment    String
  operatorName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clients {
  id              String @id @default(cuid())
  companyName     String
  taxId           String @unique // CNPJ or CPF
  taxRegistration String @unique // State registration

  state   String
  city    String
  address String
  zipCode String

  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instruments {
  id String @id @default(cuid())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  type              String
  manufacturer      String
  serialNumber      String
  certificateNumber String

  validationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documents {
  id String @id @default(cuid())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  name String
  type String
  size Int

  cloudflareR2Key String
  owner           User   @relation(fields: [ownerId], references: [id])
  ownerId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
